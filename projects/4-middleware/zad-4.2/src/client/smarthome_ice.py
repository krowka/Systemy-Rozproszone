# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.3
#
# <auto-generated>
#
# Generated from file `smarthome.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Smarthome
_M_Smarthome = Ice.openModule('Smarthome')
__name__ = 'Smarthome'

if 'State' not in _M_Smarthome.__dict__:
    _M_Smarthome.State = Ice.createTempClass()
    class State(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    State.Off = State("Off", 0)
    State.On = State("On", 1)
    State._enumerators = { 0:State.Off, 1:State.On }

    _M_Smarthome._t_State = IcePy.defineEnum('::Smarthome::State', State, (), State._enumerators)

    _M_Smarthome.State = State
    del State

if '_t_DevicesNames' not in _M_Smarthome.__dict__:
    _M_Smarthome._t_DevicesNames = IcePy.defineSequence('::Smarthome::DevicesNames', (), IcePy._t_string)

if 'TimeOfDay' not in _M_Smarthome.__dict__:
    _M_Smarthome.TimeOfDay = Ice.createTempClass()
    class TimeOfDay(object):
        def __init__(self, hour=0, minute=0, second=0):
            self.hour = hour
            self.minute = minute
            self.second = second

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.hour)
            _h = 5 * _h + Ice.getHash(self.minute)
            _h = 5 * _h + Ice.getHash(self.second)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Smarthome.TimeOfDay):
                return NotImplemented
            else:
                if self.hour is None or other.hour is None:
                    if self.hour != other.hour:
                        return (-1 if self.hour is None else 1)
                else:
                    if self.hour < other.hour:
                        return -1
                    elif self.hour > other.hour:
                        return 1
                if self.minute is None or other.minute is None:
                    if self.minute != other.minute:
                        return (-1 if self.minute is None else 1)
                else:
                    if self.minute < other.minute:
                        return -1
                    elif self.minute > other.minute:
                        return 1
                if self.second is None or other.second is None:
                    if self.second != other.second:
                        return (-1 if self.second is None else 1)
                else:
                    if self.second < other.second:
                        return -1
                    elif self.second > other.second:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_TimeOfDay)

        __repr__ = __str__

    _M_Smarthome._t_TimeOfDay = IcePy.defineStruct('::Smarthome::TimeOfDay', TimeOfDay, (), (
        ('hour', (), IcePy._t_short),
        ('minute', (), IcePy._t_short),
        ('second', (), IcePy._t_short)
    ))

    _M_Smarthome.TimeOfDay = TimeOfDay
    del TimeOfDay

if 'WashingProgram' not in _M_Smarthome.__dict__:
    _M_Smarthome.WashingProgram = Ice.createTempClass()
    class WashingProgram(object):
        def __init__(self, temperature=0.0, startTime=Ice._struct_marker):
            self.temperature = temperature
            if startTime is Ice._struct_marker:
                self.startTime = _M_Smarthome.TimeOfDay()
            else:
                self.startTime = startTime

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Smarthome.WashingProgram):
                return NotImplemented
            else:
                if self.temperature != other.temperature:
                    return False
                if self.startTime != other.startTime:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_WashingProgram)

        __repr__ = __str__

    _M_Smarthome._t_WashingProgram = IcePy.defineStruct('::Smarthome::WashingProgram', WashingProgram, (), (
        ('temperature', (), IcePy._t_float),
        ('startTime', (), _M_Smarthome._t_TimeOfDay)
    ))

    _M_Smarthome.WashingProgram = WashingProgram
    del WashingProgram

if 'Error' not in _M_Smarthome.__dict__:
    _M_Smarthome.Error = Ice.createTempClass()
    class Error(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Smarthome::Error'

    _M_Smarthome._t_Error = IcePy.defineException('::Smarthome::Error', Error, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    Error._ice_type = _M_Smarthome._t_Error

    _M_Smarthome.Error = Error
    del Error

_M_Smarthome._t_Device = IcePy.defineValue('::Smarthome::Device', Ice.Value, -1, (), False, True, None, ())

if 'DevicePrx' not in _M_Smarthome.__dict__:
    _M_Smarthome.DevicePrx = Ice.createTempClass()
    class DevicePrx(Ice.ObjectPrx):

        def getState(self, context=None):
            return _M_Smarthome.Device._op_getState.invoke(self, ((), context))

        def getStateAsync(self, context=None):
            return _M_Smarthome.Device._op_getState.invokeAsync(self, ((), context))

        def begin_getState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Device._op_getState.begin(self, ((), _response, _ex, _sent, context))

        def end_getState(self, _r):
            return _M_Smarthome.Device._op_getState.end(self, _r)

        def getName(self, context=None):
            return _M_Smarthome.Device._op_getName.invoke(self, ((), context))

        def getNameAsync(self, context=None):
            return _M_Smarthome.Device._op_getName.invokeAsync(self, ((), context))

        def begin_getName(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Device._op_getName.begin(self, ((), _response, _ex, _sent, context))

        def end_getName(self, _r):
            return _M_Smarthome.Device._op_getName.end(self, _r)

        def turnOff(self, context=None):
            return _M_Smarthome.Device._op_turnOff.invoke(self, ((), context))

        def turnOffAsync(self, context=None):
            return _M_Smarthome.Device._op_turnOff.invokeAsync(self, ((), context))

        def begin_turnOff(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Device._op_turnOff.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOff(self, _r):
            return _M_Smarthome.Device._op_turnOff.end(self, _r)

        def turnOn(self, context=None):
            return _M_Smarthome.Device._op_turnOn.invoke(self, ((), context))

        def turnOnAsync(self, context=None):
            return _M_Smarthome.Device._op_turnOn.invokeAsync(self, ((), context))

        def begin_turnOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Device._op_turnOn.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOn(self, _r):
            return _M_Smarthome.Device._op_turnOn.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.DevicePrx.ice_checkedCast(proxy, '::Smarthome::Device', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.DevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::Device'
    _M_Smarthome._t_DevicePrx = IcePy.defineProxy('::Smarthome::Device', DevicePrx)

    _M_Smarthome.DevicePrx = DevicePrx
    del DevicePrx

    _M_Smarthome.Device = Ice.createTempClass()
    class Device(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::Device')

        def ice_id(self, current=None):
            return '::Smarthome::Device'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::Device'

        def getState(self, current=None):
            raise NotImplementedError("servant method 'getState' not implemented")

        def getName(self, current=None):
            raise NotImplementedError("servant method 'getName' not implemented")

        def turnOff(self, current=None):
            raise NotImplementedError("servant method 'turnOff' not implemented")

        def turnOn(self, current=None):
            raise NotImplementedError("servant method 'turnOn' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_DeviceDisp)

        __repr__ = __str__

    _M_Smarthome._t_DeviceDisp = IcePy.defineClass('::Smarthome::Device', Device, (), None, ())
    Device._ice_type = _M_Smarthome._t_DeviceDisp

    Device._op_getState = IcePy.Operation('getState', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Smarthome._t_State, False, 0), ())
    Device._op_getName = IcePy.Operation('getName', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    Device._op_turnOff = IcePy.Operation('turnOff', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Device._op_turnOn = IcePy.Operation('turnOn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Smarthome.Device = Device
    del Device

_M_Smarthome._t_TemperatureSensor = IcePy.defineValue('::Smarthome::TemperatureSensor', Ice.Value, -1, (), False, True, None, ())

if 'TemperatureSensorPrx' not in _M_Smarthome.__dict__:
    _M_Smarthome.TemperatureSensorPrx = Ice.createTempClass()
    class TemperatureSensorPrx(_M_Smarthome.DevicePrx):

        def getTemperature(self, context=None):
            return _M_Smarthome.TemperatureSensor._op_getTemperature.invoke(self, ((), context))

        def getTemperatureAsync(self, context=None):
            return _M_Smarthome.TemperatureSensor._op_getTemperature.invokeAsync(self, ((), context))

        def begin_getTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.TemperatureSensor._op_getTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getTemperature(self, _r):
            return _M_Smarthome.TemperatureSensor._op_getTemperature.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.TemperatureSensorPrx.ice_checkedCast(proxy, '::Smarthome::TemperatureSensor', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.TemperatureSensorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::TemperatureSensor'
    _M_Smarthome._t_TemperatureSensorPrx = IcePy.defineProxy('::Smarthome::TemperatureSensor', TemperatureSensorPrx)

    _M_Smarthome.TemperatureSensorPrx = TemperatureSensorPrx
    del TemperatureSensorPrx

    _M_Smarthome.TemperatureSensor = Ice.createTempClass()
    class TemperatureSensor(_M_Smarthome.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::Device', '::Smarthome::TemperatureSensor')

        def ice_id(self, current=None):
            return '::Smarthome::TemperatureSensor'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::TemperatureSensor'

        def getTemperature(self, current=None):
            raise NotImplementedError("servant method 'getTemperature' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_TemperatureSensorDisp)

        __repr__ = __str__

    _M_Smarthome._t_TemperatureSensorDisp = IcePy.defineClass('::Smarthome::TemperatureSensor', TemperatureSensor, (), None, (_M_Smarthome._t_DeviceDisp,))
    TemperatureSensor._ice_type = _M_Smarthome._t_TemperatureSensorDisp

    TemperatureSensor._op_getTemperature = IcePy.Operation('getTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), (_M_Smarthome._t_Error,))

    _M_Smarthome.TemperatureSensor = TemperatureSensor
    del TemperatureSensor

_M_Smarthome._t_AirConditioner = IcePy.defineValue('::Smarthome::AirConditioner', Ice.Value, -1, (), False, True, None, ())

if 'AirConditionerPrx' not in _M_Smarthome.__dict__:
    _M_Smarthome.AirConditionerPrx = Ice.createTempClass()
    class AirConditionerPrx(_M_Smarthome.DevicePrx):

        def setTemperature(self, temperature, context=None):
            return _M_Smarthome.AirConditioner._op_setTemperature.invoke(self, ((temperature, ), context))

        def setTemperatureAsync(self, temperature, context=None):
            return _M_Smarthome.AirConditioner._op_setTemperature.invokeAsync(self, ((temperature, ), context))

        def begin_setTemperature(self, temperature, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.AirConditioner._op_setTemperature.begin(self, ((temperature, ), _response, _ex, _sent, context))

        def end_setTemperature(self, _r):
            return _M_Smarthome.AirConditioner._op_setTemperature.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.AirConditionerPrx.ice_checkedCast(proxy, '::Smarthome::AirConditioner', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.AirConditionerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::AirConditioner'
    _M_Smarthome._t_AirConditionerPrx = IcePy.defineProxy('::Smarthome::AirConditioner', AirConditionerPrx)

    _M_Smarthome.AirConditionerPrx = AirConditionerPrx
    del AirConditionerPrx

    _M_Smarthome.AirConditioner = Ice.createTempClass()
    class AirConditioner(_M_Smarthome.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::AirConditioner', '::Smarthome::Device')

        def ice_id(self, current=None):
            return '::Smarthome::AirConditioner'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::AirConditioner'

        def setTemperature(self, temperature, current=None):
            raise NotImplementedError("servant method 'setTemperature' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_AirConditionerDisp)

        __repr__ = __str__

    _M_Smarthome._t_AirConditionerDisp = IcePy.defineClass('::Smarthome::AirConditioner', AirConditioner, (), None, (_M_Smarthome._t_DeviceDisp,))
    AirConditioner._ice_type = _M_Smarthome._t_AirConditionerDisp

    AirConditioner._op_setTemperature = IcePy.Operation('setTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, (_M_Smarthome._t_Error,))

    _M_Smarthome.AirConditioner = AirConditioner
    del AirConditioner

_M_Smarthome._t_WashingDevice = IcePy.defineValue('::Smarthome::WashingDevice', Ice.Value, -1, (), False, True, None, ())

if 'WashingDevicePrx' not in _M_Smarthome.__dict__:
    _M_Smarthome.WashingDevicePrx = Ice.createTempClass()
    class WashingDevicePrx(_M_Smarthome.DevicePrx):

        def runProgram(self, program, context=None):
            return _M_Smarthome.WashingDevice._op_runProgram.invoke(self, ((program, ), context))

        def runProgramAsync(self, program, context=None):
            return _M_Smarthome.WashingDevice._op_runProgram.invokeAsync(self, ((program, ), context))

        def begin_runProgram(self, program, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.WashingDevice._op_runProgram.begin(self, ((program, ), _response, _ex, _sent, context))

        def end_runProgram(self, _r):
            return _M_Smarthome.WashingDevice._op_runProgram.end(self, _r)

        def stopProgram(self, context=None):
            return _M_Smarthome.WashingDevice._op_stopProgram.invoke(self, ((), context))

        def stopProgramAsync(self, context=None):
            return _M_Smarthome.WashingDevice._op_stopProgram.invokeAsync(self, ((), context))

        def begin_stopProgram(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.WashingDevice._op_stopProgram.begin(self, ((), _response, _ex, _sent, context))

        def end_stopProgram(self, _r):
            return _M_Smarthome.WashingDevice._op_stopProgram.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.WashingDevicePrx.ice_checkedCast(proxy, '::Smarthome::WashingDevice', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.WashingDevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::WashingDevice'
    _M_Smarthome._t_WashingDevicePrx = IcePy.defineProxy('::Smarthome::WashingDevice', WashingDevicePrx)

    _M_Smarthome.WashingDevicePrx = WashingDevicePrx
    del WashingDevicePrx

    _M_Smarthome.WashingDevice = Ice.createTempClass()
    class WashingDevice(_M_Smarthome.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::Device', '::Smarthome::WashingDevice')

        def ice_id(self, current=None):
            return '::Smarthome::WashingDevice'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::WashingDevice'

        def runProgram(self, program, current=None):
            raise NotImplementedError("servant method 'runProgram' not implemented")

        def stopProgram(self, current=None):
            raise NotImplementedError("servant method 'stopProgram' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_WashingDeviceDisp)

        __repr__ = __str__

    _M_Smarthome._t_WashingDeviceDisp = IcePy.defineClass('::Smarthome::WashingDevice', WashingDevice, (), None, (_M_Smarthome._t_DeviceDisp,))
    WashingDevice._ice_type = _M_Smarthome._t_WashingDeviceDisp

    WashingDevice._op_runProgram = IcePy.Operation('runProgram', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Smarthome._t_WashingProgram, False, 0),), (), None, (_M_Smarthome._t_Error,))
    WashingDevice._op_stopProgram = IcePy.Operation('stopProgram', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Smarthome.WashingDevice = WashingDevice
    del WashingDevice

_M_Smarthome._t_WashingMachine = IcePy.defineValue('::Smarthome::WashingMachine', Ice.Value, -1, (), False, True, None, ())

if 'WashingMachinePrx' not in _M_Smarthome.__dict__:
    _M_Smarthome.WashingMachinePrx = Ice.createTempClass()
    class WashingMachinePrx(_M_Smarthome.WashingDevicePrx):

        def setSpinSpeed(self, speed, context=None):
            return _M_Smarthome.WashingMachine._op_setSpinSpeed.invoke(self, ((speed, ), context))

        def setSpinSpeedAsync(self, speed, context=None):
            return _M_Smarthome.WashingMachine._op_setSpinSpeed.invokeAsync(self, ((speed, ), context))

        def begin_setSpinSpeed(self, speed, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.WashingMachine._op_setSpinSpeed.begin(self, ((speed, ), _response, _ex, _sent, context))

        def end_setSpinSpeed(self, _r):
            return _M_Smarthome.WashingMachine._op_setSpinSpeed.end(self, _r)

        def setEcoMode(self, isEco, context=None):
            return _M_Smarthome.WashingMachine._op_setEcoMode.invoke(self, ((isEco, ), context))

        def setEcoModeAsync(self, isEco, context=None):
            return _M_Smarthome.WashingMachine._op_setEcoMode.invokeAsync(self, ((isEco, ), context))

        def begin_setEcoMode(self, isEco, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.WashingMachine._op_setEcoMode.begin(self, ((isEco, ), _response, _ex, _sent, context))

        def end_setEcoMode(self, _r):
            return _M_Smarthome.WashingMachine._op_setEcoMode.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.WashingMachinePrx.ice_checkedCast(proxy, '::Smarthome::WashingMachine', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.WashingMachinePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::WashingMachine'
    _M_Smarthome._t_WashingMachinePrx = IcePy.defineProxy('::Smarthome::WashingMachine', WashingMachinePrx)

    _M_Smarthome.WashingMachinePrx = WashingMachinePrx
    del WashingMachinePrx

    _M_Smarthome.WashingMachine = Ice.createTempClass()
    class WashingMachine(_M_Smarthome.WashingDevice):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::Device', '::Smarthome::WashingDevice', '::Smarthome::WashingMachine')

        def ice_id(self, current=None):
            return '::Smarthome::WashingMachine'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::WashingMachine'

        def setSpinSpeed(self, speed, current=None):
            raise NotImplementedError("servant method 'setSpinSpeed' not implemented")

        def setEcoMode(self, isEco, current=None):
            raise NotImplementedError("servant method 'setEcoMode' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_WashingMachineDisp)

        __repr__ = __str__

    _M_Smarthome._t_WashingMachineDisp = IcePy.defineClass('::Smarthome::WashingMachine', WashingMachine, (), None, (_M_Smarthome._t_WashingDeviceDisp,))
    WashingMachine._ice_type = _M_Smarthome._t_WashingMachineDisp

    WashingMachine._op_setSpinSpeed = IcePy.Operation('setSpinSpeed', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_Smarthome._t_Error,))
    WashingMachine._op_setEcoMode = IcePy.Operation('setEcoMode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, (_M_Smarthome._t_Error,))

    _M_Smarthome.WashingMachine = WashingMachine
    del WashingMachine

_M_Smarthome._t_Dishwasher = IcePy.defineValue('::Smarthome::Dishwasher', Ice.Value, -1, (), False, True, None, ())

if 'DishwasherPrx' not in _M_Smarthome.__dict__:
    _M_Smarthome.DishwasherPrx = Ice.createTempClass()
    class DishwasherPrx(_M_Smarthome.WashingDevicePrx):

        def setSilentMode(self, isSilent, context=None):
            return _M_Smarthome.Dishwasher._op_setSilentMode.invoke(self, ((isSilent, ), context))

        def setSilentModeAsync(self, isSilent, context=None):
            return _M_Smarthome.Dishwasher._op_setSilentMode.invokeAsync(self, ((isSilent, ), context))

        def begin_setSilentMode(self, isSilent, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Dishwasher._op_setSilentMode.begin(self, ((isSilent, ), _response, _ex, _sent, context))

        def end_setSilentMode(self, _r):
            return _M_Smarthome.Dishwasher._op_setSilentMode.end(self, _r)

        def setSterilizationMode(self, isSterilized, context=None):
            return _M_Smarthome.Dishwasher._op_setSterilizationMode.invoke(self, ((isSterilized, ), context))

        def setSterilizationModeAsync(self, isSterilized, context=None):
            return _M_Smarthome.Dishwasher._op_setSterilizationMode.invokeAsync(self, ((isSterilized, ), context))

        def begin_setSterilizationMode(self, isSterilized, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.Dishwasher._op_setSterilizationMode.begin(self, ((isSterilized, ), _response, _ex, _sent, context))

        def end_setSterilizationMode(self, _r):
            return _M_Smarthome.Dishwasher._op_setSterilizationMode.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.DishwasherPrx.ice_checkedCast(proxy, '::Smarthome::Dishwasher', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.DishwasherPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::Dishwasher'
    _M_Smarthome._t_DishwasherPrx = IcePy.defineProxy('::Smarthome::Dishwasher', DishwasherPrx)

    _M_Smarthome.DishwasherPrx = DishwasherPrx
    del DishwasherPrx

    _M_Smarthome.Dishwasher = Ice.createTempClass()
    class Dishwasher(_M_Smarthome.WashingDevice):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::Device', '::Smarthome::Dishwasher', '::Smarthome::WashingDevice')

        def ice_id(self, current=None):
            return '::Smarthome::Dishwasher'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::Dishwasher'

        def setSilentMode(self, isSilent, current=None):
            raise NotImplementedError("servant method 'setSilentMode' not implemented")

        def setSterilizationMode(self, isSterilized, current=None):
            raise NotImplementedError("servant method 'setSterilizationMode' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_DishwasherDisp)

        __repr__ = __str__

    _M_Smarthome._t_DishwasherDisp = IcePy.defineClass('::Smarthome::Dishwasher', Dishwasher, (), None, (_M_Smarthome._t_WashingDeviceDisp,))
    Dishwasher._ice_type = _M_Smarthome._t_DishwasherDisp

    Dishwasher._op_setSilentMode = IcePy.Operation('setSilentMode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, (_M_Smarthome._t_Error,))
    Dishwasher._op_setSterilizationMode = IcePy.Operation('setSterilizationMode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, (_M_Smarthome._t_Error,))

    _M_Smarthome.Dishwasher = Dishwasher
    del Dishwasher

_M_Smarthome._t_ActiveDevices = IcePy.defineValue('::Smarthome::ActiveDevices', Ice.Value, -1, (), False, True, None, ())

if 'ActiveDevicesPrx' not in _M_Smarthome.__dict__:
    _M_Smarthome.ActiveDevicesPrx = Ice.createTempClass()
    class ActiveDevicesPrx(Ice.ObjectPrx):

        def listDevices(self, context=None):
            return _M_Smarthome.ActiveDevices._op_listDevices.invoke(self, ((), context))

        def listDevicesAsync(self, context=None):
            return _M_Smarthome.ActiveDevices._op_listDevices.invokeAsync(self, ((), context))

        def begin_listDevices(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.ActiveDevices._op_listDevices.begin(self, ((), _response, _ex, _sent, context))

        def end_listDevices(self, _r):
            return _M_Smarthome.ActiveDevices._op_listDevices.end(self, _r)

        def getDeviceCategory(self, deviceName, context=None):
            return _M_Smarthome.ActiveDevices._op_getDeviceCategory.invoke(self, ((deviceName, ), context))

        def getDeviceCategoryAsync(self, deviceName, context=None):
            return _M_Smarthome.ActiveDevices._op_getDeviceCategory.invokeAsync(self, ((deviceName, ), context))

        def begin_getDeviceCategory(self, deviceName, _response=None, _ex=None, _sent=None, context=None):
            return _M_Smarthome.ActiveDevices._op_getDeviceCategory.begin(self, ((deviceName, ), _response, _ex, _sent, context))

        def end_getDeviceCategory(self, _r):
            return _M_Smarthome.ActiveDevices._op_getDeviceCategory.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Smarthome.ActiveDevicesPrx.ice_checkedCast(proxy, '::Smarthome::ActiveDevices', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Smarthome.ActiveDevicesPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Smarthome::ActiveDevices'
    _M_Smarthome._t_ActiveDevicesPrx = IcePy.defineProxy('::Smarthome::ActiveDevices', ActiveDevicesPrx)

    _M_Smarthome.ActiveDevicesPrx = ActiveDevicesPrx
    del ActiveDevicesPrx

    _M_Smarthome.ActiveDevices = Ice.createTempClass()
    class ActiveDevices(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Smarthome::ActiveDevices')

        def ice_id(self, current=None):
            return '::Smarthome::ActiveDevices'

        @staticmethod
        def ice_staticId():
            return '::Smarthome::ActiveDevices'

        def listDevices(self, current=None):
            raise NotImplementedError("servant method 'listDevices' not implemented")

        def getDeviceCategory(self, deviceName, current=None):
            raise NotImplementedError("servant method 'getDeviceCategory' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Smarthome._t_ActiveDevicesDisp)

        __repr__ = __str__

    _M_Smarthome._t_ActiveDevicesDisp = IcePy.defineClass('::Smarthome::ActiveDevices', ActiveDevices, (), None, ())
    ActiveDevices._ice_type = _M_Smarthome._t_ActiveDevicesDisp

    ActiveDevices._op_listDevices = IcePy.Operation('listDevices', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Smarthome._t_DevicesNames, False, 0), ())
    ActiveDevices._op_getDeviceCategory = IcePy.Operation('getDeviceCategory', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Smarthome._t_Error,))

    _M_Smarthome.ActiveDevices = ActiveDevices
    del ActiveDevices

# End of module Smarthome
